apply plugin: 'jacoco'

allprojects {
    repositories {
        mavenCentral()
        maven { url "http://dl.bintray.com/typesafe/maven-releases" }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'jacoco'

    version = getProjectVersion()
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    configurations {
        codacy
    }

    dependencies {
        compile (
            "com.google.guava:guava:${guava_version}",
            "io.reactivex:rxjava:${rxjava_version}"
        )
        testCompile (
            "junit:junit:${junit_vesion}",
            //"org.mockito:mockito-core:${mockito_version}",
            "org.spockframework:spock-core:${spock_version}"
        )
        testRuntime (
            "cglib:cglib-nodep:${cglib_version}",           // allows mocking of classes (in addition to interfaces)
            "org.objenesis:objenesis:${objenesis_version}"  // allows mocking of classes without default constructor (together with CGLIB)
        )
        codacy group: 'com.codacy', name: 'codacy-coverage-reporter', version: '1.0.7'
    }

    def generatedSources = ['**/*_Generated.*']

    test {
        jacoco {
            excludes = generatedSources
        }
    }

    jacocoTestReport {
        afterEvaluate {
            classDirectories = files(classDirectories.files.collect {
                fileTree(dir: it, exclude: generatedSources)
            })
        }
        reports {
            xml.enabled = true
            html.enabled = true
        }
    }

//    task uploadCoverageToCodacy(type: JavaExec, dependsOn : jacocoTestReport) {
//        main = "com.codacy.CodacyCoverageReporter"
//        classpath = configurations.codacy
//        args = [
//                "-l",
//                "Java",
//                "-r",
//                "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
//        ]
//    }
//
//    task (codacyDepsize) << {
//        def size = 0;
//        configurations.codacy.collect { it.length() / (1024 * 1024) }.each { size += it }
//        println "Total dependencies size: ${Math.round(size * 100) / 100} Mb"
//
//        configurations
//                .codacy
//                .sort { -it.length() }
//                .each { println "${it.name} : ${Math.round(it.length() / (1024) * 100) / 100} kb" }
//    }
//
//    task (codacyLocs) << {
//        configurations.codacy.each {
//            String jarName = it
//            println jarName
//        }
//    }

    check.dependsOn jacocoTestReport
}

task wrapper(type: Wrapper) {
    gradleVersion = "${gradle_version}"
}

def publishedProjects = subprojects.findAll { it.path != ':uapi.sample' }

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    description = 'Generates an aggregate report from all subprojects'
    dependsOn(publishedProjects.test)

    additionalSourceDirs = files(publishedProjects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(publishedProjects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(publishedProjects.sourceSets.main.output)
    executionData = files(publishedProjects.jacocoTestReport.executionData)

    reports {
        html.enabled = true // human readable
        xml.enabled = true // required by coveralls
    }

    doFirst {
        executionData = files(executionData.findAll { it.exists() })
    }
}

configurations {
    codacy
}

dependencies {
    codacy group: 'com.codacy', name: 'codacy-coverage-reporter', version: '1.0.7'
}

task uploadCoverageToCodacy(type: JavaExec) {
    main = "com.codacy.CodacyCoverageReporter"
    classpath = configurations.codacy
    args = [
            "-l",
            "Java",
            "-r",
            "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
    ]
}

//task (codacyDepsize) << {
//    def size = 0;
//    configurations.codacy.collect { it.length() / (1024 * 1024) }.each { size += it }
//    println "Total dependencies size: ${Math.round(size * 100) / 100} Mb"
//
//    configurations
//            .codacy
//            .sort { -it.length() }
//            .each { println "${it.name} : ${Math.round(it.length() / (1024) * 100) / 100} kb" }
//}
//
//task (codacyLocs) << {
//    configurations.codacy.each {
//        String jarName = it
//        println jarName
//    }
//}

def getProjectVersion() {
    def release = project.hasProperty("project_release") ? project.project_release.toBoolean() : null
    def rcno = project.hasProperty("project_rcno") ? project.project_rcno.toInteger() : null
    if (release) {
        return "${project_version}-release"
    } else if (rcno > 0) {
        return "${project_version}-rc${rcno}"
    } else {
        def timestampFormat = new java.text.SimpleDateFormat('yyyyMMddHHmmss')
        timestampFormat.timeZone = TimeZone.getTimeZone("UTC")
        def ts = timestampFormat.format(new Date())
        return "${project_version}-${ts}"
    }
}

//apply plugin: 'application'
//
//mainClassName = 'uapi.app.internal.Launcher'
//
//task copyConfig {
//    def cfgDir = file("conf")
//    outputs.dir cfgDir
//}
//
//distributions {
//    main {
//        baseName = 'uapi'
//        contents {
//            from (copyConfig) {
//                into "conf"
//            }
//        }
//    }
//}
