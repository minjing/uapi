subprojects {
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'jacoco'

    version = getProjectVersion()
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenCentral()
    }

    dependencies {
        compile (
            "com.google.guava:guava:${guava_version}",
            "io.reactivex:rxjava:${rxjava_version}"
        )
        testCompile (
            "junit:junit:${junit_vesion}",
            //"org.mockito:mockito-core:${mockito_version}",
            "org.spockframework:spock-core:${spock_version}"
        )
        testRuntime (
            "cglib:cglib-nodep:${cglib_version}",           // allows mocking of classes (in addition to interfaces)
            "org.objenesis:objenesis:${objenesis_version}"  // allows mocking of classes without default constructor (together with CGLIB)
        )
    }

    def generatedSources = ['**/*_Generated.*']

    test {
        jacoco {
            excludes = generatedSources
        }
    }

    jacocoTestReport {
        afterEvaluate {
            classDirectories = files(classDirectories.files.collect {
                fileTree(dir: it, exclude: generatedSources)
            })
        }
        reports {
            xml.enabled = true
            html.enabled = true
        }
    }

    check.dependsOn jacocoTestReport
}

task wrapper(type: Wrapper) {
    gradleVersion = "${gradle_version}"
}

def getProjectVersion() {
    def release = project.hasProperty("project_release") ? project.project_release.toBoolean() : null
    def rcno = project.hasProperty("project_rcno") ? project.project_rcno.toInteger() : null
    if (release) {
        return "${project_version}-release"
    } else if (rcno > 0) {
        return "${project_version}-rc${rcno}"
    } else {
        def timestampFormat = new java.text.SimpleDateFormat('yyyyMMddHHmmss')
        timestampFormat.timeZone = TimeZone.getTimeZone("UTC")
        def ts = timestampFormat.format(new Date())
        return "${project_version}-${ts}"
    }
}

//apply plugin: 'application'
//
//mainClassName = 'uapi.app.internal.Launcher'
//
//task copyConfig {
//    def cfgDir = file("conf")
//    outputs.dir cfgDir
//}
//
//distributions {
//    main {
//        baseName = 'uapi'
//        contents {
//            from (copyConfig) {
//                into "conf"
//            }
//        }
//    }
//}
